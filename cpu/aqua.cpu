; AQUA CPU description.  -*- Scheme -*-
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

; general architecture information
(define-arch
  (name aqua)
  (comment "AQUA architecture")
  (default-alignment forced)
  (insn-lsb0? #t)
  (machs aqua)
  (isas aqua)
)

(define-isa
  (name aqua)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
  (liw-insns 1)
  (parallel-insns 1)
)

(define-cpu
  (name aqua)
  (comment "aqua cpu family")
  (endian big)
  (word-bitsize 32)
  (parallel-insns 1)
)

(define-mach
  (name aqua)
  (comment "aqua cpu")
  (cpu aqua)
)

(define-model
  (name aqua)
  (comment "aqua")
  (mach aqua)
  (unit u-exec "Execution Unit" ()
	  1 1 ; issue done
	  () () () ()
  )
)

; Instruction fields
(dnf f-opcode       "opcode"         () 31 6)
(dnf f-rd           "rd"             () 25 5)
(dnf f-ra           "ra"             () 20 5)
(dnf f-rb           "rb"             () 15 5)
(dnf f-func1        "func1"          () 3  4)
(dnf f-func2        "func2"          () 10 7)

(dnf f-imm21-n      "imm21-n"        () 20 21)
(dnf f-imm16-l      "imm16-l"        () 15 16)
(dnf f-imm12-i      "imm12-i"        () 16 12)
(dnf f-imm21-c-high "imm21-c-high"   () 25 5)
(dnf f-imm21-c-low  "imm21-c-low"    () 15 16)
(dnmf f-imm21-c     "imm21-c"        () INT
 (f-imm21-c-high f-imm21-c-low)
 (sequence ()
	(set (ifield f-imm21-c-high) (and (sra (ifield f-imm21-c) (const 16)) (const #x1f)))
	(set (ifield f-imm21-c-low)  (and (ifield f-imm21-c) (const #xffff))))
 (sequence ()
	(set (ifield f-imm21-c)
	 (sub (xor (const #x100000)
				 (or (sll (ifield f-imm21-c-high) (const 16))
					(ifield f-imm21-c-low)))
		(const #x100000))))
)
(dnf f-imm16-s-high "imm16-s-high"   () 25 5)
(dnf f-imm16-s-low  "imm16-s-low"    () 10 11)
(dnmf f-imm16-s     "imm16-s"        () INT
 (f-imm16-s-high f-imm16-s-low)
 (sequence ()
	(set (ifield f-imm16-s-high) (and (sra (ifield f-imm16-s) (const 11)) (const #x1f)))
	(set (ifield f-imm16-s-low)  (and (ifield f-imm16-s) (const #x7ff))))
 (sequence ()
	(set (ifield f-imm16-s)
	 (sub (xor (const #x8000)
				 (or (sll (ifield f-imm16-s-high) (const 11))
					(ifield f-imm16-s-low)))
		(const #x8000))))
)

; Enums
(define-normal-insn-enum insn-op  "insn format enums" () OP_ f-opcode
  (.map .str (.iota 64))
)
(define-normal-insn-enum func1-op  "insn format enums" () FUNC1_ f-func1
  ("0" "1" "2" "3" "4" "5" "6" "7"
	 "8" "9" "10" "11" "12" "13" "14" "15")
)
(define-normal-insn-enum func2-op  "insn format enums" () FUNC2_ f-func2
  (.map .str (.iota 64))
)
(define-normal-insn-enum rd-op  "insn format enums" () RD_ f-rd ("0"))
(define-normal-insn-enum ra-op  "insn format enums" () RA_ f-ra ("0"))
(define-normal-insn-enum rb-op  "insn format enums" () RB_ f-rb ("0"))
(define-normal-insn-enum limm12-op  "insn format enums" () L_IMM12_ f-imm16-l ("0"))

;Hardware
(dnh h-pc "program counter" (PC) (pc) () () ())
(dnh h-gr "general registers"
     () ; attributes
     (register WI (32))
     (keyword "" ((ra 28) (rsp 30) (rbp 31)
                  (r0 0) (r1 1) (r2 2) (r3 3)
                  (r4 4) (r5 5) (r6 6) (r7 7)
                  (r8 8) (r9 9) (r10 10) (r11 11)
                  (r12 12) (r13 13) (r14 14) (r15 15)
                  (r16 16) (r17 17) (r18 18) (r19 19)
                  (r20 20) (r21 21) (r22 22) (r23 23)
                  (r24 24) (r25 25) (r26 26) (r27 27)
                  (r28 28) (r29 29) (r30 30) (r31 31)
                  ))
     () ()
)

(dnh h-int21  "21 bit int"  () (immediate (INT 21)) () () ())
(dnh h-int16  "16 bit int"  () (immediate (INT 16)) () () ())
(dnh h-int12  "12 bit int"  () (immediate (INT 12)) () () ())
(dnh h-uint7  "7 bit uint"  () (immediate (UINT 7)) () () ())
(dnh h-uint4  "4 bit uint"  () (immediate (UINT 4)) () () ())

; Operand
(dnop rd            "destination register"         () h-gr f-rd)
(dnop ra           "source register 1"            () h-gr f-ra)
(dnop rb           "source register 2"            () h-gr f-rb)
(dnop imm21c        "21bit immediate value c-form" () h-int21 f-imm21-c)
(dnop imm16l        "16bit immediate value k-form" () h-int16 f-imm16-l)
(dnop imm16s        "16bit immediate value s-form" () h-int16 f-imm16-s)
(dnop imm12i        "12bit immediate value i-form" () h-int12 f-imm12-i)
(dnop func1         "func1"                        () h-uint4 f-func1)
(dnop func2         "func2"                        () h-uint7 f-func2)

(dnop imm21n        "21bit immediate value n-form" () h-int21 f-imm21-n)
(define-operand
  (name imm21n-low)
  (comment "low 21 bit immediate value n-form")
  (attrs)
  (type h-int21)
  (index f-imm21-n)
  (handlers (parse "lo21"))
)
(define-operand
  (name imm21n-high)
  (comment "high 21 bit immediate value n-form")
  (attrs)
  (type h-int21)
  (index f-imm21-n)
  (handlers (parse "hi21"))
)

; Instruction
; Instruction - behaviour

; Instruction - native instruction definition
(define-pmacro (alu-op mnemonic tag r1 r2 r3)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/reg/reg")
   ()
   (.str mnemonic " $rd,$ra,$rb")
   (+ OP_1 r1 r2 r3 FUNC2_0 tag)
   ()
   ()
  )
  (dni (.sym mnemonic "i")
   (.str mnemonic "i reg/reg/imm16l")
   ()
   (.str mnemonic "i $rd,$ra,$imm16l")
   (+ OP_0 r1 r2 imm16l tag)
   ()
   ()
  )
 )
)

(alu-op add    FUNC1_0  rd ra rb)
(alu-op sub    FUNC1_1  rd ra rb)
(alu-op sll    FUNC1_2  rd ra rb)
(alu-op srl    FUNC1_3  rd ra rb)
(alu-op sra    FUNC1_4  rd ra rb)
(alu-op and    FUNC1_5  rd ra rb)
(alu-op or     FUNC1_6  rd ra rb)
(alu-op xor    FUNC1_7  rd ra rb)
(alu-op addx4  FUNC1_8  rd ra rb)
(alu-op subx4  FUNC1_9  rd ra rb)
(alu-op mul    FUNC1_10 rd ra rb)
(alu-op mulh   FUNC1_11 rd ra rb)

(define-pmacro (cmp-op mnemonic tag r1 r2 r3)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/reg/reg")
   ()
   (.str mnemonic " $rd,$ra,$rb")
   (+ OP_7 r1 r2 r3 FUNC2_0 tag)
   ()
   ()
  )
  (dni (.sym mnemonic "i")
   (.str mnemonic "i reg/reg/imm16l")
   ()
   (.str mnemonic "i $rd,$ra,$imm16l")
   (+ OP_6 r1 r2 imm16l tag)
   ()
   ()
  )
 )
)
(cmp-op eq    FUNC1_0  rd ra rb)
(cmp-op ne    FUNC1_1  rd ra rb)
(cmp-op lt    FUNC1_2  rd ra rb)
(cmp-op le    FUNC1_3  rd ra rb)
(cmp-op ult   FUNC1_4  rd ra rb)
(cmp-op ule   FUNC1_5  rd ra rb)
(cmp-op gt    FUNC1_6  rd ra rb)
(cmp-op ugt   FUNC1_7  rd ra rb)

(define-pmacro (sys-op mnemonic tag)
 (begin
  (dni mnemonic
   (.str mnemonic " imm12i")
   ()
   (.str mnemonic " $imm12i")
   (+ OP_30 RD_0 RA_0 imm12i tag)
   ()
   ()
  )
 )
)
(sys-op sysenter  FUNC1_0)
(sys-op sysexit   FUNC1_1)

(define-pmacro (n-op mnemonic opcode r1 imm com1 com2)
 (begin
  (dni mnemonic
   (.str mnemonic com1)
   ()
   (.str mnemonic com2)
   (+ opcode r1 imm)
   ()
   ()
  )
 )
)
(n-op li  OP_18 rd imm21n-low   " reg/imm21n-low"  " $rd,$imm21n-low" )
(n-op lih OP_19 rd imm21n-high  " reg/imm21n-high" " $rd,$imm21n-high")
(n-op jl  OP_32 rd imm21n       " reg/imm21n"      " $rd,$imm21n")

(define-pmacro (l-op mnemonic opcode r1 r2 imm)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/imm16l")
   ()
   (.str mnemonic " $rd,$imm16l")
   (+ opcode r1 r2 imm)
   ()
   ()
  )
 )
)
(l-op  load  OP_24 rd ra imm16l)

(define-pmacro (s-op mnemonic opcode r2 r3 imm)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/imm16s")
   ()
   (.str mnemonic " $rd,$imm16s")
   (+ opcode r2 r3 imm)
   ()
   ()
  )
 )
)
(s-op store OP_25 ra rb imm16s)

(define-pmacro (c-op mnemonic opcode r2 imm)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/imm16s")
   ()
   (.str mnemonic " $rd,$imm16s")
   (+ opcode r2 imm)
   ()
   ()
  )
 )
)
(c-op jr   OP_33 ra imm21c)
(c-op jeq  OP_40 ra imm21c)
(c-op jne  OP_41 ra imm21c)
(c-op jlt  OP_42 ra imm21c)
(c-op jle  OP_43 ra imm21c)
(c-op jgt  OP_44 ra imm21c)
(c-op jge  OP_45 ra imm21c)

; instruction nop
(define-pmacro (nop-op mnemonic)
 (begin
  (dni mnemonic
   (.str mnemonic)
   ()
   (.str mnemonic)
   (+ OP_0 RD_0 RA_0 RB_0 FUNC2_0 FUNC1_0)
   ()
   ()
  )
 )
)
(nop-op nop)

