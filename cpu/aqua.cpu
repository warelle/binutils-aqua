; AQUA CPU description.  -*- Scheme -*-
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

; general architecture information
(define-arch
  (name aqua)
  (comment "AQUA architecture")
  (default-alignment forced)
  (insn-lsb0? #t)
  (machs aqua)
  (isas aqua)
)

(define-isa
  (name aqua)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
  (liw-insns 1)
  (parallel-insns 1)
)

(define-cpu
  (name aqua)
  (comment "aqua cpu family")
  (endian big)
  (word-bitsize 32)
  (parallel-insns 1)
)

(define-mach
  (name aqua)
  (comment "aqua cpu")
  (cpu aqua)
)

(define-model
  (name aqua)
  (comment "aqua")
  (mach aqua)
  (unit u-exec "Execution Unit" ()
	  1 1 ; issue done
	  () () () ()
  )
)

; Instruction fields

(dnf f-opcode       "opcode"         () 31 4)
(dnf f-rx           "rx"             () 27 5)
(dnf f-ra           "ra"             () 22 5)
(dnf f-rb           "rb"             () 17 5)
(dnf f-prediction   "prediction"     () 17 2)
(dnf f-literal      "literal"        () 12 8)
(dnf f-tag          "tag"            () 4  5)

; Enums
(define-normal-insn-enum insn-op  "insn format enums" () OP_ f-opcode
  ("0" "1" "2" "3" "4" "5" "6" "7"
   "8" "9" "10" "11" "12" "13" "14" "15")
)
(define-normal-insn-enum insn-alu "insn format enums" () ALU_ f-tag
  ("0" "1" "2" "3" "4" "5" "6" "7"
   "8" "9" "10" "11" "12" "13" "14" "15"
   "16" "17" "18" "19" "20" "21" "22" "23"
   "24" "25" "26" "27" "28" "29" "30" "31")
)

;Hardware
(dnh h-pc "program counter" (PC) (pc) () () ())
(dnh h-gr "general registers"
     () ; attributes
     (register WI (32))
     (keyword "" ((ra 28) (rsp 30) (rbp 31)
                  (r0 0) (r1 1) (r2 2) (r3 3)
                  (r4 4) (r5 5) (r6 6) (r7 7)
                  (r8 8) (r9 9) (r10 10) (r11 11)
                  (r12 12) (r13 13) (r14 14) (r15 15)
                  (r16 16) (r17 17) (r18 18) (r19 19)
                  (r20 20) (r21 21) (r22 22) (r23 23)
                  (r24 24) (r25 25) (r26 26) (r27 27)
                  (r28 28) (r29 29) (r30 30) (r31 31)
                  ))
     () ()
)

(dnh h-uint5 "5 bit uint" () (immediate (UINT 5)) () () ())
(dnh h-int8  "8 bit int"  () (immediate (INT 8)) () () ())

; Operand
(dnop rx            "destination register"        () h-gr f-rx)
(dnop ra            "source register"             () h-gr f-ra)
(dnop rb            "additional source register"  () h-gr f-rb)
(dnop imm8          "8bit immediate value"        () h-int8 f-literal)
(dnop tag           "alu/fpu operation tag"       () h-uint5 f-tag)

;(define-operand
;  (name imm16)
;  (comment "16 bit immediate")
;  (attrs)
;  (type h-int16)
;  (index f-displacement)
;  (handlers (parse "default"))
;)
;(define-operand
;  (name imm16low)
;  (comment "low 16 bit immediate")
;  (attrs)
;  (type h-int16)
;  (index f-displacement)
;  (handlers (parse "lo16"))
;)
;(define-operand
;  (name imm16high)
;  (comment "high 16 bit immediate")
;  (attrs)
;  (type h-int16)
;  (index f-displacement)
;  (handlers (parse "hi16"))
;)
;(dnop uimm16        "16bit uimmediate value"       () h-uint16 f-displacement)

; Instruction
; Instruction - behaviour

; Instruction - native instruction definition
(define-pmacro (i-form-alu-op mnemonic tag r1 r2 r3 lit)
 (begin
  (dni mnemonic
   (.str mnemonic " reg/reg/reg/imm8")
   ()
   (.str mnemonic " $rx,$ra,$rb,$imm8")
   (+ OP_0 r1 r2 r3 lit tag)
   ()
   ()
  )
 )
)

(i-form-alu-op add    ALU_0 rx ra rb imm8)
(i-form-alu-op sub    ALU_1 rx ra rb imm8)
(i-form-alu-op shl    ALU_2 rx ra rb imm8)
(i-form-alu-op shr    ALU_3 rx ra rb imm8)
(i-form-alu-op sar    ALU_4 rx ra rb imm8)
(i-form-alu-op and    ALU_5 rx ra rb imm8)
(i-form-alu-op or     ALU_6 rx ra rb imm8)
(i-form-alu-op xor    ALU_7 rx ra rb imm8)
(i-form-alu-op cmpult ALU_8 rx ra rb imm8)
(i-form-alu-op cmpule ALU_9 rx ra rb imm8)
(i-form-alu-op cmpne  ALU_10 rx ra rb imm8)
(i-form-alu-op cmpeq  ALU_11 rx ra rb imm8)
(i-form-alu-op cmplt  ALU_12 rx ra rb imm8)
(i-form-alu-op cmple  ALU_13 rx ra rb imm8)
(i-form-alu-op fcmplt ALU_14 rx ra rb imm8)
(i-form-alu-op fcmple ALU_15 rx ra rb imm8)
